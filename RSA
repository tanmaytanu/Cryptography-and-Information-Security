from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

# Function for generating public and private key pair
def generate_key_pair():
    key = RSA.generate(2048)
    public_key = key.publickey().export_key()
    private_key = key.export_key()
    return public_key, private_key

# Encryption Function
def encrypt(message, public_key):
    cipher = PKCS1_OAEP.new(RSA.import_key(public_key))
    encrypted_message = cipher.encrypt(message)
    return encrypted_message

# Decryption Function
def decrypt(encrypted_message, private_key):
    cipher = PKCS1_OAEP.new(RSA.import_key(private_key))
    decrypted_message = cipher.decrypt(encrypted_message)
    return decrypted_message

# Main function to handle user input and process encryption/decryption
def main():
    # Get the plaintext input from the user
    plaintext = input("Enter the message to encrypt: ").encode()

    # Generate RSA key pair (public and private keys)
    public_key, private_key = generate_key_pair()

    # Display generated keys
    print("\n---- Generated RSA Keys ----")
    print(f"Public Key: {public_key.decode()}")
    print(f"Private Key: {private_key.decode()}")

    # Encrypt the user's message
    encrypted_message = encrypt(plaintext, public_key)
    print("\nEncrypted message (in hex format):", encrypted_message.hex())

    # Decrypt the message
    decrypted_message = decrypt(encrypted_message, private_key)
    print("\nDecrypted message:", decrypted_message.decode())

# Execute the main function
if __name__ == "__main__":
    main()
