# Encryption Function
def encryption(plaintext, key1, key2):
    ciphertext = ""
    # This for loop is for traversing the text.
    for i in range(len(plaintext)):
        char = plaintext[i]
        # This condition is for keeping the "space" same in the cipher text.
        if char == " ":
            ciphertext = ciphertext + char
        # Ascii value of upper case letters start from 65.
        elif char.isupper():
            ciphertext = ciphertext + chr(
                ((((ord(char) - 65) * key1) + key2) % 26) + 65
            )
        # Ascii value of lower case letters start from 97.
        else:
            ciphertext = ciphertext + chr(
                ((((ord(char) - 97) * key1) + key2) % 26) + 97
            )
    return ciphertext

# Decryption Function
def decryption(ciphertext, key1, key2):
    plaintext = ""
    # Finding the multiplicative inverse of key1
    mi = pow(key1, -1, 26)
    # This for loop is for traversing the text.
    for i in range(len(ciphertext)):
        char = ciphertext[i]
        # This condition is for keeping the "space" same in the plaintext.
        if char == " ":
            plaintext = plaintext + char
        # Ascii value of upper case letters start from 65.
        elif char.isupper():
            plaintext = plaintext + chr(((((ord(char) - 65) - key2) * mi) % 26) + 65)
        # Ascii value of lower case letters start from 97.
        else:
            plaintext = plaintext + chr(((((ord(char) - 97) - key2) * mi) % 26) + 97)
    return plaintext

# Main function
def main():
    # Rename 'input' variable to avoid conflict with the input function
    user_plaintext = input("Enter the plaintext: ")
    key1 = int(input("Enter key1 (a number that is coprime with 26): "))
    key2 = int(input("Enter key2 (an integer): "))

    # Encryption
    ciphertext = encryption(user_plaintext, key1, key2)
    print("Encrypted text: ", ciphertext.upper())

    # Decryption
    decodedtext = decryption(ciphertext, key1, key2)
    print("Decrypted text: ", decodedtext.lower())

if __name__ == "__main__":
    main()
